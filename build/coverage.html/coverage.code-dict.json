{"/home/travis/build/npmtest/node-npmtest-react-native-icons/test.js":"/* istanbul instrument in package npmtest_react_native_icons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/lib.npmtest_react_native_icons.js":"/* istanbul instrument in package npmtest_react_native_icons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_icons = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_icons = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-icons && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_icons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_icons\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_icons.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_icons.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_icons.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_icons.__dirname + '/lib.npmtest_react_native_icons.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/shim-assert.js":"/* @flow */\n'use strict';\n\nmodule.exports = {\n\n  basic( object: any, text: string ) {\n\n    if (!object){\n      throw Error( text );\n    }\n\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXIconImage.android.js":"/**\n *\n * @providesModule SMXIconImage\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, View, requireNativeComponent, processColor} = React;\nvar shimAssert = require('./shim-assert');\n\nvar ICON_REF = 'icon';\n\nclass IconImage extends React.Component {\n\n  setNativeProps(props:Object) {\n    this.refs[ICON_REF].setNativeProps(props);\n  }\n\n  render() {\n    var style = [styles.base, this.props.style];\n    shimAssert.basic( style, 'style must be initialized');\n\n    var name = this.props.name;\n    shimAssert.basic( name, 'name must be initialized');\n\n    var size = this.props.size;\n    shimAssert.basic( size, 'size must be initialized');\n\n    if(name.indexOf('|') == -1) {\n      throw Error('icon name \"' + name + '\" doesn\\'t specify a font name prefix. ex. \"ion|beer\"');\n    }\n\n    var color = this.props.color;\n\n    var nativeProps = Object.assign({},this.props);\n    if(!color && style.color) {\n     nativeProps.color = processColor(style.color);\n    }\n    nativeProps.style = style;\n\n    return <RCTMyCustomView {...nativeProps} ref={ICON_REF} />;\n  }\n}\n\nvar styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  }\n});\nIconImage.propTypes = {\n  name: React.PropTypes.string,\n  color: React.PropTypes.string,\n  size: React.PropTypes.number,\n  scaleX: React.PropTypes.number,\n  scaleY: React.PropTypes.number,\n  translateX: React.PropTypes.number,\n  translateY: React.PropTypes.number,\n  rotation: React.PropTypes.number,\n  renderToHardwareTextureAndroid: React.PropTypes.bool,\n  onLayout: React.PropTypes.bool,\n  accessibilityLiveRegion: React.PropTypes.string,\n  accessibilityComponentType: React.PropTypes.string,\n  importantForAccessibility: React.PropTypes.string,\n  accessibilityLabel: React.PropTypes.string,\n  testID: React.PropTypes.string,\n};\n\nvar RCTMyCustomView = requireNativeComponent('SMXIconImage', IconImage);\nmodule.exports = IconImage;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXIconImage.ios.js":"/**\n *\n * @providesModule SMXIconImage\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, View, requireNativeComponent, processColor } = React;\nvar shimAssert = require('./shim-assert');\n\nvar ICON_REF = 'icon';\n\nvar SMXIconImage = React.createClass({\n  propTypes: {\n    name: React.PropTypes.string,\n    size: React.PropTypes.number,\n    color: React.PropTypes.string,\n\n    /**\n     * accessible - Whether this element should be revealed as an accessible\n     * element.\n     */\n    accessible: React.PropTypes.bool,\n    /**\n     * accessibilityLabel - Custom string to display for accessibility.\n     */\n    accessibilityLabel: React.PropTypes.string,\n\n    /**\n     * testID - A unique identifier for this element to be used in UI Automation\n     * testing scripts.\n     */\n    testID: React.PropTypes.string,\n    icon: React.PropTypes.object\n  },\n\n  setNativeProps(props:Object) {\n    this.refs[ICON_REF].setNativeProps(props);\n  },\n\n  render: function () {\n    var style = [styles.base, this.props.style];\n    shimAssert.basic( style, 'style must be initialized');\n\n    var name = this.props.name;\n    shimAssert.basic( name, 'name must be initialized');\n\n    var size = this.props.size;\n    shimAssert.basic( size, 'size must be initialized');\n\n    if(name.indexOf('|') == -1) {\n      throw Error('icon name \"' + name + '\" doesn\\'t specify a font prefix. ex. \"ion|beer\"');\n    }\n\n    var color = this.props.color;\n\n    var nativeProps = Object.assign({},this.props);\n\n    if(!color && style.color) {\n      color = style.color;\n    }\n\n    nativeProps.style = style;\n    nativeProps.icon = {\n      name: name,\n      size: size,\n      color: processColor(color)\n    };\n\n    return <SMXIconImageView {...nativeProps} ref={ICON_REF} />;\n  }\n});\n\nvar styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  }\n});\n\nvar SMXIconImageView = requireNativeComponent('FAKIconImage', SMXIconImage);\n\nmodule.exports = SMXIconImage;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXLoadingImage.android.js":"/**\n *\n * @providesModule SMXLoadingImage\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, requireNativeComponent, Animated, Easing, processColor } = React;\n\nvar shimAssert = require('./shim-assert');\n\nclass LoadingImage extends React.Component {\n\n  constructor() {\n    super();\n    this._animate = this._animate.bind(this);\n    this.state = {\n      angle: new Animated.Value(0)\n    };\n  }\n\n  setNativeProps(props:Object) {\n\n  }\n\n  _animate() {\n    this.state.angle.setValue(0);\n    Animated.timing(this.state.angle, {\n      toValue: 360,\n      duration: 1200,\n      easing: Easing.linear\n    }).start(this._animate);\n  }\n\n  componentDidMount() {\n    this._animate();\n  }\n\n  render() {\n    var transformStyle = {\n      transform: [\n        {\n          rotate: this.state.angle.interpolate({\n            inputRange: [0, 360],\n            outputRange: ['0deg', '360deg']\n          })\n        }\n      ]\n    };\n\n    var style = [styles.base, this.props.style];\n\n    shimAssert.basic(style, 'style must be initialized');\n\n    var name = this.props.name;\n    shimAssert.basic(name, 'name must be initialized');\n\n    var size = this.props.size;\n    shimAssert.basic(size, 'size must be initialized');\n\n    var color = this.props.color;\n\n    var nativeProps = Object.assign({}, this.props);\n    nativeProps.icon = {\n      name: name,\n      size: size,\n      color: processColor(color)\n    };\n\n    return <Animated.View style={[styles.base, style, transformStyle]}>\n      <SMXLoadingImageView style={{backgroundColor: 'transparent'}} {...nativeProps} />\n    </Animated.View>;\n  }\n}\n\nvar styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  }\n});\n\nLoadingImage.propTypes = {\n  name: React.PropTypes.string,\n  color: React.PropTypes.string,\n  size: React.PropTypes.number,\n  scaleX: React.PropTypes.number,\n  scaleY: React.PropTypes.number,\n  translateX: React.PropTypes.number,\n  translateY: React.PropTypes.number,\n  rotation: React.PropTypes.number,\n  renderToHardwareTextureAndroid: React.PropTypes.bool,\n  onLayout: React.PropTypes.bool,\n  accessibilityLiveRegion: React.PropTypes.string,\n  accessibilityComponentType: React.PropTypes.string,\n  importantForAccessibility: React.PropTypes.string,\n  accessibilityLabel: React.PropTypes.string,\n  testID: React.PropTypes.string,\n};\n\nvar SMXLoadingImageView = requireNativeComponent('SMXIconImage', LoadingImage);\n\nmodule.exports = LoadingImage;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXLoadingImage.ios.js":"/**\n *\n * @providesModule SMXLoadingImage\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, View, requireNativeComponent, Animated, Easing, processColor } = React;\n\nvar shimAssert = require('./shim-assert');\n\nvar SMXLoadingImage = React.createClass({\n  propTypes: {\n    name: React.PropTypes.string,\n    size: React.PropTypes.number,\n    color: React.PropTypes.string,\n\n    /**\n     * accessible - Whether this element should be revealed as an accessible\n     * element.\n     */\n    accessible: React.PropTypes.bool,\n    /**\n     * accessibilityLabel - Custom string to display for accessibility.\n     */\n    accessibilityLabel: React.PropTypes.string,\n\n    /**\n     * testID - A unique identifier for this element to be used in UI Automation\n     * testing scripts.\n     */\n    testID: React.PropTypes.string,\n    icon: React.PropTypes.object\n  },\n\n  getInitialState: function () {\n    return {\n      angle: new Animated.Value(0)\n    };\n  },\n\n  setNativeProps(props:Object) {\n\n  },\n\n  _animate: function () {\n    this.state.angle.setValue(0);\n    Animated.timing(this.state.angle, {\n      toValue: 360,\n      duration: 1200,\n      easing: Easing.linear\n    }).start(this._animate);\n  },\n\n  componentDidMount: function () {\n    this._animate();\n  },\n\n  render: function ():ReactElement {\n    var transformStyle = {\n      transform: [\n        {\n          rotate: this.state.angle.interpolate({\n            inputRange: [0, 360],\n            outputRange: ['0deg', '360deg']\n          })\n        }\n      ]\n    };\n\n    var style = [styles.base, this.props.style];\n\n    shimAssert.basic(style, 'style must be initialized');\n\n    var name = this.props.name;\n    shimAssert.basic(name, 'name must be initialized');\n\n    var size = this.props.size;\n    shimAssert.basic(size, 'size must be initialized');\n\n    var color = this.props.color;\n\n    var nativeProps = Object.assign({},this.props);\n    nativeProps.icon = {\n      name: name,\n      size: size,\n      color: processColor(color)\n    };\n\n    return <Animated.View style={[styles.base, style, transformStyle]}>\n      <SMXLoadingImageView style={{backgroundColor: 'transparent'}} {...nativeProps} />\n    </Animated.View>;\n  }\n});\n\n\nvar styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  }\n});\nvar SMXLoadingImageView = requireNativeComponent('FAKIconImage', SMXLoadingImage);\n\nmodule.exports = SMXLoadingImage;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXTabBarIconItemIOS.android.js":"/**\n *\n * @providesModule SMXTabBarItemIOS\n */\n\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, View, Dimensions} = React;\n\nvar DummyTab = React.createClass({\n  render: function() {\n    if (!this.props.selected) {\n      return <View />;\n    }\n    return (\n      <View style={[this.props.style, styles.tab]}>\n        {this.props.children}\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  tab: {\n    // TODO(5405356): Implement overflow: visible so position: absolute isn't useless\n    // position: 'absolute',\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n    borderColor: 'red',\n    borderWidth: 1,\n  }\n});\n\nmodule.exports = DummyTab;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXTabBarIconItemIOS.ios.js":"/**\n *\n * @providesModule SMXTabBarItemIOS\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar { Image, StyleSheet, View, requireNativeComponent, PropTypes, Dimensions} = React;\n\nvar onlyChild = React.Children.only;\n\n// Copy this right in here from react-contrib\nclass StaticContainer extends React.Component {\n\n  shouldComponentUpdate(nextProps) {\n    return !!nextProps.shouldUpdate;\n  }\n\n  render() {\n    var child = this.props.children;\n    return (child === null || child === false) ? null : onlyChild(child);\n  }\n\n}\n\nvar SmixxTabBarItemIOS = React.createClass({\n  propTypes: {\n    onPress: PropTypes.func.isRequired,\n    selected: PropTypes.bool.isRequired,\n    badgeValue: PropTypes.string,\n    title: PropTypes.string,\n    icon: PropTypes.object,\n    selectedIcon: PropTypes.object,\n  },\n\n  getInitialState: function() {\n    return {\n      hasBeenSelected: false,\n    };\n  },\n\n  componentWillMount: function() {\n    if (this.props.selected) {\n      this.setState({hasBeenSelected: true});\n    }\n  },\n\n  componentWillReceiveProps: function(nextProps: { selected: boolean }) {\n  if (this.state.hasBeenSelected || nextProps.selected) {\n    this.setState({hasBeenSelected: true});\n  }\n},\n\nrender: function() {\n  var tabContents = null;\n  // if the tab has already been shown once, always continue to show it so we\n  // preserve state between tab transitions\n  if (this.state.hasBeenSelected) {\n    tabContents = (\n      <StaticContainer shouldUpdate={this.props.selected}>\n        {this.props.children}\n      </StaticContainer>\n    );\n  } else {\n    tabContents = <View />;\n  }\n\n  var iconName = this.props.iconName;\n  var iconSize = this.props.iconSize || 28;\n\n  // defaults selectedIconName to iconName, selectedIconSize to iconSize\n  var selectedIconName = this.props.selectedIconName || this.props.iconName;\n  var selectedIconSize = this.props.selectedIconSize || this.props.iconSize;\n\n\n  if(iconName.indexOf('|') == -1) {\n    throw Error('iconName \"' + name + '\" doesn\\'t specify a font name prefix. ex. \"ion|beer\"');\n  }\n\n  if(selectedIconName.indexOf('|') == -1) {\n    throw Error('selectedIconName \"' + name + '\" doesn\\'t specify a font name prefix. ex. \"ion|beer\"');\n  }\n\n  var icon = {name : iconName, size: iconSize};\n  var selectedIcon = {name: selectedIconName, size: selectedIconSize};\n\n  return (\n    <SmixxTabBarItem\n      icon={icon}\n      selectedIcon={selectedIcon}\n      onPress={this.props.onPress}\n      selected={this.props.selected}\n      badgeValue={this.props.badgeValue}\n      title={this.props.title}\n      style={[styles.tab, this.props.style]}>\n        {tabContents}\n    </SmixxTabBarItem>\n  );\n}\n});\n\nvar styles = StyleSheet.create({\n  tab: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  }\n});\n\nvar SmixxTabBarItem = requireNativeComponent('SMXTabBarItem', SmixxTabBarItemIOS);\nmodule.exports = SmixxTabBarItemIOS;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXTabBarIOS.android.js":"/**\n *\n * @providesModule SMXTabBarIOS\n */\n\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, View, Dimensions} = React;\n\nvar DummyTabBarIOS = React.createClass({\n  render: function() {\n    return (\n      <View style={[this.props.style, styles.tabGroup]}>\n        {this.props.children}\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  tabGroup: {\n    flex: 1,\n  }\n});\n\nmodule.exports = DummyTabBarIOS;\n","/home/travis/build/npmtest/node-npmtest-react-native-icons/node_modules/react-native-icons/SMXTabBarIOS.ios.js":"/**\n *\n * @providesModule SMXTabBarIOS\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar { StyleSheet, requireNativeComponent, PropTypes, processColor } = React;\nvar SMXTabBarIconItemIOS = require('./SMXTabBarIconItemIOS.ios.js');\n\nvar SMXTabBarIOS = React.createClass({\n  propTypes: {\n    tintColor: PropTypes.string,\n    barTintColor: PropTypes.string,\n    translucent: PropTypes.bool,\n  },\n\n  statics: {\n    Item: SMXTabBarIconItemIOS,\n  },\n\n  render: function () {\n    var nativeProps = {\n      tintColor : this.props.tintColor,\n      barTintColor : this.props.barTintColor,\n      translucent : this.props.translucent\n    };\n\n    return (\n      <SMXIconTabBar style={[styles.tabGroup, this.props.style]} {...nativeProps}>\n        {this.props.children}\n      </SMXIconTabBar>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  tabGroup: {\n    flex: 1\n  }\n});\n\nvar SMXIconTabBar = requireNativeComponent('SMXTabBar', SMXTabBarIOS);\n\nmodule.exports = SMXTabBarIOS;\n"}